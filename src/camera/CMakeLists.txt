include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}
        ${CMAKE_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/src/camera)
set(DEVICE_LIBS)
set(DEVICE_DEFS)
set(H_FILES Camera.h)
set(CPP_FILES Camera.cpp)

option(WITH_CAMERAXIMEA "Use Ximea camera" OFF)
option(WITH_CAMERAIIDC "Use IIDC camera" OFF)
option(WITH_CAMERAIDSIMAGING "Use IDS camera" OFF)
option(WITH_CAMERAPOINTGREY "Use Pointgrey camera" OFF)
option(WITH_CAMERAV4L "Use V4L camera" OFF)
option(WITH_CAMERAOPENCV "Use OpenCV camera" OFF)

if(WITH_CAMERAXIMEA)
    include("${CMAKE_SOURCE_DIR}/cmake/FindXimea.cmake")
    if(XIMEA_FOUND)
        if(APPLE)
            FIND_LIBRARY(XIMEA_LIBRARY NAMES m3api)
            FIND_PATH(XIMEA_PATH xiApi.h)
        else()
            set(XIMEA_LIBRARY xiapi64)
        endif()
        include_directories(${XIMEA_PATH})
        set(H_FILES ${H_FILES} CameraXIMEA.h)
        set(CPP_FILES ${CPP_FILES} CameraXIMEA.cpp)
        set(DEVICE_LIBS ${DEVICE_LIBS} ${XIMEA_LIBRARY})
        set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAXIMEA)
    else(XIMEA_FOUND)
        message(SEND_ERROR "Could not find Ximea camera support.")
    endif(XIMEA_FOUND)
endif(WITH_CAMERAXIMEA)

if(WITH_CAMERAIDSIMAGING)
    include("${CMAKE_SOURCE_DIR}/cmake/FindIds.cmake")
    if(IDS_FOUND)
        include_directories(${IDS_PATH})
        set(H_FILES ${H_FILES} CameraIDSImaging.h)
        set(CPP_FILES ${CPP_FILES} CameraIDSImaging.cpp)
        set(DEVICE_LIBS ${DEVICE_LIBS} ${IDS_LIBRARY})
        set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAIDSIMAGING)
    else(IDS_FOUND)
        message(SEND_ERROR "Could not find IDS uEye camera support.")
    endif(IDS_FOUND)
endif(WITH_CAMERAIDSIMAGING)

if(WITH_CAMERAIDC)
    set(H_FILES ${H_FILES} CameraIIDC.h)
    set(CPP_FILES ${CPP_FILES} CameraIIDC.cpp)
    set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAIDC)
endif(WITH_CAMERAIDC)

if(WITH_CAMERAPOINTGREY)
    include("${CMAKE_SOURCE_DIR}/cmake/FindPointGrey.cmake")
    if(POINTGREY_FOUND)
        include_directories(${POINTGREY_PATH})
        set(H_FILES ${H_FILES} CameraPointGrey.h)
        set(CPP_FILES ${CPP_FILES} CameraPointGrey.cpp)
        set(DEVICE_LIBS ${DEVICE_LIBS} ${POINTGREY_LIBRARY})
        set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAPOINTGREY)
    else(POINTGREY_FOUND)
        message(SEND_ERROR "Could not find PointGrey camera camera support.")
    endif(POINTGREY_FOUND)
endif(WITH_CAMERAPOINTGREY)

if(WITH_CAMERAV4L)
    set(H_FILES ${H_FILES} CameraV4L.h)
    set(CPP_FILES ${CPP_FILES} CameraV4L.cpp)
    set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAV4L)
endif(WITH_CAMERAV4L)

if(WITH_CAMERAOPENCV)
    set(H_FILES ${H_FILES} CameraOpenCV.h)
    set(CPP_FILES ${CPP_FILES} CameraOpenCV.cpp)
    set(DEVICE_LIBS ${DEVICE_LIBS} ${OpenCV_LIBS})
    set(DEVICE_DEFS ${DEVICE_DEFS} -DWITH_CAMERAOPENCV)
endif(WITH_CAMERAOPENCV)

add_compiler_export_flags()
add_definitions(${DEVICE_DEFS})
add_library(slcamera SHARED ${H_FILES} ${CPP_FILES})
generate_export_header(slcamera)
target_link_libraries(slcamera
    ${DEVICE_LIBS}
    ${Boost_LIBRARIES}
)
install(TARGETS slcamera LIBRARY DESTINATION lib)
